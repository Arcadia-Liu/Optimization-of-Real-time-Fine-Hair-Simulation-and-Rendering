//
// Copyright (c) 2016-2022 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//


#include "../Common.ush"
#include "TressFXVisibilityCommon.ush"

Texture2D<uint> CounterTexture;
RWBuffer<uint> OutArgBuffer;
uint ThreadGroupSize;
uint ItemCountPerGroup;

[numthreads(1, 1, 1)]
void CopyCS(uint GroupIndex : SV_GroupIndex, uint3 DispatchThreadId : SV_DispatchThreadID)
{
	const uint NodeCount  = CounterTexture.Load(uint3(0,0,0)) * ItemCountPerGroup;
	const uint TotalGroup = (NodeCount + ThreadGroupSize-1) / ThreadGroupSize;
#if 0
	// Minimize unused groups
	const uint SideSize   = uint(floor(sqrt(float(TotalGroup))));
	const uint ExtraLines = (TotalGroup - SideSize * SideSize + (SideSize - 1)) / SideSize;
	OutArgBuffer[0] = SideSize;
	OutArgBuffer[1] = SideSize + ExtraLines;
	OutArgBuffer[2] = 1;
#else
	// Note: Use a fixed group count width (64) for avoiding loading the indirect args (to avoid dep. memory fetch)
	// This value is in sync with DeepTransmittanceMask.usf | TressFXEnvironementLightingCS.usf
	if (TotalGroup < TRESSFX_VISIBILITY_GROUP_COUNT_WIDTH)
	{
		OutArgBuffer[0] = TotalGroup;
		OutArgBuffer[1] = 1;
		OutArgBuffer[2] = 1;
	}
	else
	{
		const uint DispatchY = ceil(float(TotalGroup) / float(TRESSFX_VISIBILITY_GROUP_COUNT_WIDTH));
		OutArgBuffer[0] = TRESSFX_VISIBILITY_GROUP_COUNT_WIDTH;
		OutArgBuffer[1] = DispatchY;
		OutArgBuffer[2] = 1;
	}
#endif
}