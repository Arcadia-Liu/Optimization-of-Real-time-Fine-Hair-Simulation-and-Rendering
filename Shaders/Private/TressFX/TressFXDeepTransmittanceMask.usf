//
// Copyright (c) 2016-2022 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#include "TressFXDeepShadowCommonStruct.ush"

#include "../Common.ush"
#include "../CommonViewUniformBuffer.ush"
#include "../SceneTextureParameters.ush"
#include "../DeferredShadingCommon.ush"
#include "../ShadowFilteringCommon.ush"

#include "TressFXDeepShadowCommon.ush"
#include "TressFXCommon.ush"
#include "TressFXDeepTransmittanceCommon.ush"
#include "TressFXVisibilityCommon.ush"



#define PERMUTATION_TRANSMITTANCE_DEEP_SHADOW 0


#if SHADER_TRANSMITTANCE

float3 ToWorldPosition(float2 UV, float Depth)
{
	float2 ScreenPosition = (UV - View.ScreenPositionScaleBias.wz) / View.ScreenPositionScaleBias.xy;
	float4 HomogeneousWorldPosition = mul(float4(ScreenPosition * Depth, Depth, 1), View.ScreenToWorld);
	float3 WorldPosition = HomogeneousWorldPosition.xyz / HomogeneousWorldPosition.w;

	return WorldPosition;
}


// Need to match FDeepShadowData::MaxMacroGroupCount in HairRendering.h
#define MAX_HAIR_MACROGROUP_COUNT 16 

StructuredBuffer<FDeepShadowTransformTFX> DeepShadow_WorldToLightTransformBuffer;
uint				DeepShadow_bIsGPUDriven;

uint2				DeepShadow_Resolution;
float4x4			DeepShadow_CPUWorldToLightTransforms[MAX_HAIR_MACROGROUP_COUNT];
float3				LightDirection;
uint				LightChannelMask;
uint				MaxVisibilityNodeCount;
float4				LightPosition;
float				DeepShadow_DepthBiasScale;
float				DeepShadow_DensityScale;
float				LightRadius;
float				DeepShadow_KernelAperture;
float4				DeepShadow_LayerDepths;
uint				DeepShadow_KernelType;
uint				DeepShadow_DebugMode;
int4				DeepShadow_AtlasSlotOffsets_AtlasSlotIndex[MAX_HAIR_MACROGROUP_COUNT];
Texture2D<float>	DeepShadow_FrontDepthTexture;
Texture2D<float4>	DeepShadow_DomTexture;

Texture2D<float4> 	RayMarchMaskTexture;

StructuredBuffer<FPackedTressFXSample> HairVisibilityNodeData;
StructuredBuffer<uint>		HairVisibilityNodeCoord;
Buffer<uint4>				IndirectArgsBuffer;

Texture3D<float4>			HairLUTTexture;
SamplerState				LinearSampler;
RWStructuredBuffer<FPackedTressFXTransmittanceMask> OutputColor;

#if PERMUTATION_GROUP_SIZE == 0
	#define TRANSMITTANCE_GROUP_SIZE 64
#elif PERMUTATION_GROUP_SIZE == 1
	#define TRANSMITTANCE_GROUP_SIZE 32
#else
	#error Unknown group size	
#endif


#if PERMUTATION_TRANSMITTANCE_TYPE == PERMUTATION_TRANSMITTANCE_DEEP_SHADOW

FTressFXTransmittanceMask ComputeTransmittance(
	float3 WorldPosition,
	FGBufferData GBuffer, 
	FTransmittanceSettingsTFX Settings,
	float4				InLayerDepths,
	Texture2D<float>	FrontDepthTexture,
	Texture2D<float4>	DomTexture,
	Texture3D<float4>	HairLUTTexture,
	SamplerState		LinearSampler)
{
	FTressFXTransmittanceMask Out = InitTressFXTransmittanceMask();
	{
		const bool bIsDirectionalLight = Settings.LightPosition.w == 0;

		// LightSpacePosition is 'WorldPosition' in LightSpace (TexelCoord.XY / NDC Depth.Z)
		const float3 LightSpacePosition = ToLightPositionTFX(WorldPosition, Settings.WorldToLightTransform) * float3(Settings.DeepShadowResolution, 1) + float3(Settings.DeepShadowOffset, 0); 
		const float3 L = bIsDirectionalLight ? Settings.LightDirection : normalize(Settings.LightPosition.xyz - WorldPosition);
		const float3 T = GBuffer.WorldNormal;
		const float SinLightAngle = dot(L, T);

		float DepthBias = 0;
		if (Settings.DeepShadowDepthBiasScale > 0)
		{
			#if 0 
			const float DephtBiasSlope = 6;
			const float DefaultDepthBias = LAYER_DEPTH0 * Settings.DeepShadowDepthBiasScale; 
			DepthBias = (CosLightAngle*DephtBiasSlope + 1) * DefaultDepthBias;
			#else
			DepthBias = InLayerDepths[0] * Settings.DeepShadowDepthBiasScale;
			#endif
		}

		// Compute the number of hair count between light & shading point
		
		{
			float HairCount = 0;
			if (Settings.TransmittanceKernelType == 2)
			{
				HairCount = TFXSampleDOM_PCF(LightSpacePosition.xyz, DepthBias, InLayerDepths, FrontDepthTexture, DomTexture);
			}
			else
			{
				HairCount = 0;
			}
			Out = TFXComputeTransmittanceFromHairCount(HairCount * Settings.DeepShadowDensityScale, 1, GBuffer, SinLightAngle, HairLUTTexture, LinearSampler);
		}

/*		if (Settings.DebugMode != 0)
		{
			Out.Transmittance = ComputeDomDebugColor(WorldPosition, Settings.WorldToLightTransform, InLayerDepths, FrontDepthTexture, LinearSampler);
			Out.HairCount = 1;
		}
*/	}
	return Out;
}

[numthreads(TRANSMITTANCE_GROUP_SIZE, 1, 1)]
void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	// Note: Use a fixed group count width (TRESSFX_VISIBILITY_GROUP_COUNT_WIDTH) for avoiding loading the indirect args (to avoid dep. memory fetch)
	const uint LocalOffset = DispatchThreadId.x + DispatchThreadId.y * TRANSMITTANCE_GROUP_SIZE * TRESSFX_VISIBILITY_GROUP_COUNT_WIDTH;

	if (LocalOffset >= MaxVisibilityNodeCount)
	{
		return;
	}

	const uint PackedCoord	 = HairVisibilityNodeCoord[LocalOffset];
	const uint2 PixelCoord	 = uint2((PackedCoord & 0xFFFF), ((PackedCoord>>16) & 0xFFFF));

	const float2 UV = (PixelCoord + float2(0.5f, 0.5f)) / float2(View.BufferSizeAndInvSize.xy);
	const float3 TransmittanceRandom = float3(InterleavedGradientNoise(PixelCoord, 1), InterleavedGradientNoise(PixelCoord, 2), InterleavedGradientNoise(PixelCoord, 3));

	{
		const FPackedTressFXSample NodeData = HairVisibilityNodeData[LocalOffset];
		const FTressFXSample Sample = UnpackTressFXSample(NodeData);

		if ((LightChannelMask & Sample.LightChannelMask) == 0)
		{
			OutputColor[LocalOffset] = InitNullPackedTressFXTransmittanceMask();
			return;
		}

		FGBufferData GBuffer;
		GBuffer.ShadingModelID = SHADINGMODELID_HAIR;
		GBuffer.WorldNormal = Sample.Tangent;
		GBuffer.BaseColor = Sample.BaseColor;
		GBuffer.Roughness = Sample.Roughness;

		const uint MacroGroupIndex = clamp(Sample.MacroGroupId, 0, MAX_HAIR_MACROGROUP_COUNT - 1);
		const int3 SlotOffset_SlotIndex = DeepShadow_AtlasSlotOffsets_AtlasSlotIndex[MacroGroupIndex].xyz;
		float4x4 WorldToLightTransform = 0;
		if (DeepShadow_bIsGPUDriven > 0)
		{
			WorldToLightTransform = DeepShadow_WorldToLightTransformBuffer[SlotOffset_SlotIndex.z].WorldToClip;
		}	
		else
		{
			WorldToLightTransform = DeepShadow_CPUWorldToLightTransforms[MacroGroupIndex];
		}
		
		FTransmittanceSettingsTFX Settings;
		Settings.DeepShadowOffset = SlotOffset_SlotIndex.xy;
		Settings.DeepShadowResolution = DeepShadow_Resolution;
		Settings.WorldToLightTransform = WorldToLightTransform;
		Settings.LightDirection = LightDirection;
		Settings.LightPosition = LightPosition;
		Settings.DeepShadowDepthBiasScale = DeepShadow_DepthBiasScale;
		Settings.DeepShadowDensityScale = DeepShadow_DensityScale;
		Settings.TransmittanceKernelApertureInDegree = DeepShadow_KernelAperture;
		Settings.TransmittanceKernelType = DeepShadow_KernelType;
		Settings.Random = TransmittanceRandom;
		Settings.DebugMode = DeepShadow_DebugMode;

		const float SceneDepth = ConvertFromDeviceZ(Sample.Depth);
		const float3 WorldPosition = ToWorldPosition(UV, SceneDepth);
		const FTressFXTransmittanceMask TransmittanceMask = ComputeTransmittance(WorldPosition, GBuffer, Settings, DeepShadow_LayerDepths, DeepShadow_FrontDepthTexture, DeepShadow_DomTexture, HairLUTTexture, LinearSampler);

		const FPackedTressFXTransmittanceMask PackedTransmittanceMask = PackTransmittanceMaskTFX(TransmittanceMask);
		OutputColor[LocalOffset] = PackedTransmittanceMask;
	}
}
#endif

#endif

#if SHADER_CLEAR

uint ElementCount;
RWStructuredBuffer<FPackedTressFXTransmittanceMask> OutputMask;

[numthreads(64, 1, 1)]
void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	const uint Index = DispatchThreadId.x;
	if (Index >= ElementCount)
	{
		return;
	}

	OutputMask[Index] = PackTransmittanceMaskTFX(InitTressFXTransmittanceMask());
}

#endif // SHADER_CLEAR