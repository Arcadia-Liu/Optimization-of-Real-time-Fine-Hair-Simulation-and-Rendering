//
// Copyright (c) 2016-2022 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#include "../Common.ush"
#include "TressFXVisibilityCommon.ush" 

#define TILE_PIXEL_SIZE_X 8
#define TILE_PIXEL_SIZE_Y 8

uint2 ResolutionOffset;
float VelocityThreshold;

Texture2D<uint> NodeIndex;
Buffer<float2> NodeVelocity;
StructuredBuffer<FNodeVisTFX> NodeVis; 

#define VELOCITY_TYPE_NONE 0
#define VELOCITY_TYPE_AVG 1  
#define VELOCITY_TYPE_CLOSEST 2
#define VELOCITY_TYPE_MAX 3

#if PERMUTATION_VELOCITY != VELOCITY_TYPE_NONE
  #if PERMUTATION_OUTPUT_FORMAT == 0
	RWTexture2D<float2> OutVelocityTexture;
  #else
	RWTexture2D<float4> OutVelocityTexture;
  #endif
#endif

RWTexture2D<uint> OutResolveMaskTexture;

#if PERMUTATION_OUTPUT_FORMAT == 0
float2 ToOutput(float2 In) { return In; }
#else
float4 ToOutput(float2 In) { return float4(In, 0, 0); }
#endif


[numthreads(TILE_PIXEL_SIZE_X, TILE_PIXEL_SIZE_Y, 1)]
void MainCS(uint GroupIndex : SV_GroupIndex, uint3 DispatchThreadId : SV_DispatchThreadID)
{
	const uint2 PixelCoord = DispatchThreadId.xy + ResolutionOffset;
	const FNodeDescTFX NodeDesc = DecodeNodeDescTFX(NodeIndex.Load(uint3(PixelCoord, 0)));
	if (NodeDesc.Count > 0)
	{
		// Store final sort node data 

		#if PERMUTATION_VELOCITY == VELOCITY_TYPE_CLOSEST
		float2 ClosestEncodedVelocity = 0;
		float ClosestDepth = 0; // Inverse-Z
		#endif		

		bool bNeedFastResolve = false;
		for (uint NodeIt = 0; NodeIt < NodeDesc.Count; ++NodeIt)
		{
			const uint SampleIndex = NodeDesc.Offset + NodeIt;
			const float2 EncodedVelocity = NodeVelocity[SampleIndex];

			#if PERMUTATION_VELOCITY == VELOCITY_TYPE_CLOSEST
			const float NodeDepth = NodeVis[SampleIndex].Depth;
			if (NodeDepth > ClosestDepth) // Inverse-Z
			{
				ClosestEncodedVelocity = EncodedVelocity;
				ClosestDepth = NodeDepth;
			}
			#endif

			// If the velocity is above a certain threshold, the pixel will be resolve with a fast resolved. 
			// This will result into a sharper, but more noisy output. However it sill avoid getting smearing 
			// from TAA.
			bNeedFastResolve = bNeedFastResolve || NeedFastResolveTFX(EncodedVelocity, VelocityThreshold);
		}

		#if PERMUTATION_VELOCITY == VELOCITY_TYPE_CLOSEST
		OutVelocityTexture[PixelCoord] = ToOutput(ClosestEncodedVelocity);
		#endif		

		OutResolveMaskTexture[PixelCoord] = bNeedFastResolve ? 1 : 0;
	}
}
