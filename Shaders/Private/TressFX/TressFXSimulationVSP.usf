//
// Copyright (c) 2016-2022 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//


#include "../Common.ush"
#include "TressFXSimulationCommon.ush"



RWBuffer<float4> GuidesDeformedPositionBuffer; 
RWBuffer<float4> GuidesDeformedPrevPositionBuffer;

StructuredBuffer<FStrandLevelData> GuidesDeformedStrandLevelDataBuffer;


[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void VelocityShockPropagation(uint GIndex : SV_GroupIndex,
	                          uint3 GId : SV_GroupID,
	                          uint3 DTid : SV_DispatchThreadID)
{
    uint GlobalStrandIndex, LocalStrandIndex, GlobalVertexIndex, LocalVertexIndex, NumVerticesInTheStrand, IndexForSharedMem, StrandType;
    CalcIndicesInVertexLevelMaster(GIndex, GId.x, GlobalStrandIndex, LocalStrandIndex, GlobalVertexIndex, LocalVertexIndex, NumVerticesInTheStrand, IndexForSharedMem, StrandType);
	
	if ( LocalVertexIndex < 2 )
		return;
	
	float4 VspQuat = GuidesDeformedStrandLevelDataBuffer[GlobalStrandIndex].VspQuat;
	float4 VspTrans = GuidesDeformedStrandLevelDataBuffer[GlobalStrandIndex].VspTranslation;
	float VspCoeff = VspTrans.w;

	float4 pos_new_n = GuidesDeformedPositionBuffer[GlobalVertexIndex];
	float4 pos_old_n = GuidesDeformedPrevPositionBuffer[GlobalVertexIndex];
		
    pos_new_n.xyz = (1.f - VspCoeff) * pos_new_n.xyz + VspCoeff * (MultQuaternionAndVector(VspQuat, pos_new_n.xyz) + VspTrans.xyz);
    pos_old_n.xyz = (1.f - VspCoeff) * pos_old_n.xyz + VspCoeff * (MultQuaternionAndVector(VspQuat, pos_old_n.xyz) + VspTrans.xyz);

	GuidesDeformedPositionBuffer[GlobalVertexIndex] = pos_new_n;
	GuidesDeformedPrevPositionBuffer[GlobalVertexIndex] = pos_old_n;
}

