//
// Copyright (c) 2016-2022 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//


#include "../Common.ush"
#include "TressFXAABBCommon.ush"

#if SHADER_AABBUPDATE

uint bClearBuffer;
uint MacroGroupId;
uint MacroGroupValid;

// Group data packed as {uint3 AABBMin, uint3 AABBMax}
Buffer<int> InGroupAABBBuffer0;
Buffer<int> InGroupAABBBuffer1;
Buffer<int> InGroupAABBBuffer2;
Buffer<int> InGroupAABBBuffer3;
Buffer<int> InGroupAABBBuffer4;
Buffer<int> InGroupAABBBuffer5;
Buffer<int> InGroupAABBBuffer6;
Buffer<int> InGroupAABBBuffer7;
RWBuffer<int> OutMacroGroupAABBBuffer;

void UpdateValue(inout FTressFXAABB B, in uint Index, in Buffer<int> InBuffer)
{
	FTressFXAABB A = ReadTressFXAABB(Index, InBuffer);
	B = UnionTressFXAABB(A, B);
}

[numthreads(1, 1, 1)]
void Main(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	if (DispatchThreadId.x == 0)
	{
		FTressFXAABB Bound = InitTressFXAABB();
		if (bClearBuffer == 0)
		{
			Bound = ReadTressFXAABB(MacroGroupId, OutMacroGroupAABBBuffer);
		}

		if (MacroGroupValid & 1)   { UpdateValue(Bound, 0, InGroupAABBBuffer0); }
		if (MacroGroupValid & 2)   { UpdateValue(Bound, 0, InGroupAABBBuffer1); }
		if (MacroGroupValid & 4)   { UpdateValue(Bound, 0, InGroupAABBBuffer2); }
		if (MacroGroupValid & 8)   { UpdateValue(Bound, 0, InGroupAABBBuffer3); }
		if (MacroGroupValid & 16)  { UpdateValue(Bound, 0, InGroupAABBBuffer4); }
		if (MacroGroupValid & 32)  { UpdateValue(Bound, 0, InGroupAABBBuffer5); }
		if (MacroGroupValid & 64)  { UpdateValue(Bound, 0, InGroupAABBBuffer6); }
		if (MacroGroupValid & 128) { UpdateValue(Bound, 0, InGroupAABBBuffer7); }

		WriteTressFXAABB(MacroGroupId, Bound, OutMacroGroupAABBBuffer);
	}
}

#endif
