//
// Copyright (c) 2016-2022 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
#pragma once

bool IsDepthCloserTFX(float a, float b)
{
	return a < b;
}

float ComputeDOMWeightTFX(float DistanceToFrontDepth, float LayerDepth)
{
	return IsDepthCloserTFX(DistanceToFrontDepth, LayerDepth) ? 1 : 0;
}

float4 ComputeDOMWeightsTFX(float DistanceToFrontDepth, float4 InLayerDepths)
{
	float4 Weigths = 0;
	Weigths[0] = ComputeDOMWeightTFX(DistanceToFrontDepth, InLayerDepths[0]);
	Weigths[1] = ComputeDOMWeightTFX(DistanceToFrontDepth, InLayerDepths[1]);
	Weigths[2] = ComputeDOMWeightTFX(DistanceToFrontDepth, InLayerDepths[2]);
	Weigths[3] = ComputeDOMWeightTFX(DistanceToFrontDepth, InLayerDepths[3]);
	return Weigths;
}	

float GetDomDistanceToFrontDepthTFX(float FrontDepth, float LightSpaceZ)
{
#if HAS_INVERTED_Z_BUFFER
	return max(0.0f, FrontDepth - LightSpaceZ);
#else
	return max(0.0f, LightSpaceZ - FrontDepth);
#endif
}

float GetDomDistanceToFrontDepthWithBiasTFX(float FrontDepth, float LightSpaceZ, float DepthBias)
{
#if HAS_INVERTED_Z_BUFFER
	return max(0.0f, FrontDepth - LightSpaceZ - DepthBias);
#else
	return max(0.0f, LightSpaceZ - FrontDepth - DepthBias);
#endif
}

float InterpolateCountTFX(float DepthToFrontDepth, float Layer0Depth, float Layer1Depth)
{
	return saturate((DepthToFrontDepth - Layer0Depth) / (Layer1Depth - Layer0Depth));
}

float TFXComputeHairCount(float4 DomValue, float DistanceToFrontDepth, float4 InLayerDepths)
{
	float OutCount = 0;
	
	if (DistanceToFrontDepth < InLayerDepths[0])
		OutCount = lerp(          0, DomValue[0], InterpolateCountTFX(DistanceToFrontDepth, 0, InLayerDepths[0]));
	else if (DistanceToFrontDepth < InLayerDepths[1])
		OutCount = lerp(DomValue[0], DomValue[1], InterpolateCountTFX(DistanceToFrontDepth, InLayerDepths[0], InLayerDepths[1]));
	else if (DistanceToFrontDepth < InLayerDepths[2])
		OutCount = lerp(DomValue[1], DomValue[2], InterpolateCountTFX(DistanceToFrontDepth, InLayerDepths[1], InLayerDepths[2]));
	else if (DistanceToFrontDepth < InLayerDepths[3])
		OutCount = lerp(DomValue[2], DomValue[3], InterpolateCountTFX(DistanceToFrontDepth, InLayerDepths[2], InLayerDepths[3]));
	else 
		OutCount = DomValue[3];
	return OutCount;
}

float TFXSampleDOM_PCF2x2(
	float3 LightSpacePosition, 
	float DepthBias,
	const float4 InLayerDepths,
	Texture2D<float> FrontDepthTexture,
	Texture2D<float4> DomTexture)
{
	// Find the bottom left corner texel for bilinear interpolation
	const float2 PBottomLeft = floor(LightSpacePosition.xy - float(0.5f).xx); // Bottom-left corner of the bottom left texel.
	const uint2 C0 = uint2(PBottomLeft);
	const uint2 C1 = C0 + uint2(1,0);
	const uint2 C2 = C0 + uint2(0,1);
	const uint2 C3 = C0 + uint2(1,1);
	
	// @todo_hair: gather4
	const float FrontDepth0 = FrontDepthTexture.Load(uint3(C0, 0)).x;
	const float FrontDepth1 = FrontDepthTexture.Load(uint3(C1, 0)).x;
	const float FrontDepth2 = FrontDepthTexture.Load(uint3(C2, 0)).x;
	const float FrontDepth3 = FrontDepthTexture.Load(uint3(C3, 0)).x;

	const float4 DOMValue0  = DomTexture.Load(uint3(C0, 0));
	const float4 DOMValue1  = DomTexture.Load(uint3(C1, 0));
	const float4 DOMValue2  = DomTexture.Load(uint3(C2, 0));
	const float4 DOMValue3  = DomTexture.Load(uint3(C3, 0));
	
	const float HairCount0	= TFXComputeHairCount(DOMValue0, GetDomDistanceToFrontDepthWithBiasTFX(FrontDepth0, LightSpacePosition.z, DepthBias), InLayerDepths);
	const float HairCount1	= TFXComputeHairCount(DOMValue1, GetDomDistanceToFrontDepthWithBiasTFX(FrontDepth1, LightSpacePosition.z, DepthBias), InLayerDepths);
	const float HairCount2	= TFXComputeHairCount(DOMValue2, GetDomDistanceToFrontDepthWithBiasTFX(FrontDepth2, LightSpacePosition.z, DepthBias), InLayerDepths);
	const float HairCount3	= TFXComputeHairCount(DOMValue3, GetDomDistanceToFrontDepthWithBiasTFX(FrontDepth3, LightSpacePosition.z, DepthBias), InLayerDepths);

	const float2 S = frac(LightSpacePosition.xy - (PBottomLeft + 0.5f));
	const float HairCount01 = lerp(HairCount0, HairCount1, S.x);
	const float HairCount23 = lerp(HairCount2, HairCount3, S.x);
	return lerp(HairCount01, HairCount23, S.y);
}

float TFXSampleDOM_PCF(
	float3 LightSpacePosition, 
	float DepthBias,
	const float4 InLayerDepths,
	Texture2D<float> FrontDepthTexture,
	Texture2D<float4> DomTexture)
{	
	// Explicit 1 ring (6x6 / 5x5) with uniform weighting
	float HairCount = 0;
	float w = 1;
	HairCount += w * TFXSampleDOM_PCF2x2(LightSpacePosition + float3(-2,-2, 0), DepthBias, InLayerDepths, FrontDepthTexture, DomTexture);
	HairCount += w * TFXSampleDOM_PCF2x2(LightSpacePosition + float3( 0,-2, 0), DepthBias, InLayerDepths, FrontDepthTexture, DomTexture);
	HairCount += w * TFXSampleDOM_PCF2x2(LightSpacePosition + float3( 2,-2, 0), DepthBias, InLayerDepths, FrontDepthTexture, DomTexture);

	HairCount += w * TFXSampleDOM_PCF2x2(LightSpacePosition + float3(-2, 0, 0), DepthBias, InLayerDepths, FrontDepthTexture, DomTexture);
	HairCount += w * TFXSampleDOM_PCF2x2(LightSpacePosition + float3( 0, 0, 0), DepthBias, InLayerDepths, FrontDepthTexture, DomTexture);
	HairCount += w * TFXSampleDOM_PCF2x2(LightSpacePosition + float3( 2, 0, 0), DepthBias, InLayerDepths, FrontDepthTexture, DomTexture);

	HairCount += w * TFXSampleDOM_PCF2x2(LightSpacePosition + float3(-2, 2, 0), DepthBias, InLayerDepths, FrontDepthTexture, DomTexture);
	HairCount += w * TFXSampleDOM_PCF2x2(LightSpacePosition + float3( 0, 2, 0), DepthBias, InLayerDepths, FrontDepthTexture, DomTexture);
	HairCount += w * TFXSampleDOM_PCF2x2(LightSpacePosition + float3( 2, 2, 0), DepthBias, InLayerDepths, FrontDepthTexture, DomTexture);

	HairCount /= w * 9;
	return HairCount;
}

float3 ToLightPositionTFX(float3 WorldPosition, float4x4 WorldToLightTransform)
{
	float4 LightPos = mul(float4(WorldPosition, 1), WorldToLightTransform);
	LightPos.xyz /= LightPos.w;
	const float2 LightUV = (LightPos.xy + float(1).xx) * 0.5f;
	return float3(LightUV.x, 1 - LightUV.y, LightPos.z);
}
