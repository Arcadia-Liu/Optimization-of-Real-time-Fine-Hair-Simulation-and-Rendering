//
// Copyright (c) 2016-2022 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//


#include "../Common.ush"
#include "../SceneData.ush"
#include "TressFXSimulationCommon.ush"


float3 GuidesRestPositionOffset;

float4x4 ComponentToWorld;

Buffer<uint4>  GuidesRestPositionBuffer;

RWBuffer<float4> GuidesDeformedPositionBuffer; 


[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void GuidesRestToDeformed(uint GIndex : SV_GroupIndex,
                  uint3 GId : SV_GroupID,
                  uint3 DTid : SV_DispatchThreadID)
{
    uint GlobalStrandIndex, LocalStrandIndex, GlobalVertexIndex, LocalVertexIndex, NumVerticesInTheStrand, IndexForSharedMem, StrandType;
    CalcIndicesInVertexLevelMaster(GIndex, GId.x, GlobalStrandIndex, LocalStrandIndex, GlobalVertexIndex, LocalVertexIndex, NumVerticesInTheStrand, IndexForSharedMem, StrandType);

	uint4 PackedRestPosition = GuidesRestPositionBuffer[GlobalVertexIndex];
	float3 RestPos = f16tof32(PackedRestPosition.xyz) + GuidesRestPositionOffset;

	float4 DeformedPos = mul(float4(RestPos,1),ComponentToWorld);

	GuidesDeformedPositionBuffer[GlobalVertexIndex] = float4(DeformedPos.xyz,asfloat(PackedRestPosition.w));
}


uint NumTotalVertices;

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void GuidesRestToDeformedTemp(uint GIndex : SV_GroupIndex,
                  uint3 GId : SV_GroupID,
                  uint3 DTid : SV_DispatchThreadID)
{
    uint GlobalVertexIndex = GId.x*THREAD_GROUP_SIZE+GIndex;

	if(GlobalVertexIndex>=NumTotalVertices)
		return ;

	uint4 PackedRestPosition = GuidesRestPositionBuffer[GlobalVertexIndex];
	float3 RestPos = f16tof32(PackedRestPosition.xyz) + GuidesRestPositionOffset;

	float4 DeformedPos = mul(float4(RestPos,1),ComponentToWorld);

	GuidesDeformedPositionBuffer[GlobalVertexIndex] = float4(DeformedPos.xyz,asfloat(PackedRestPosition.w));
}
