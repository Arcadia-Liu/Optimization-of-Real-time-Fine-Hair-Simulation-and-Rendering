//
// Copyright (c) 2016-2022 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//


#include "../Common.ush"
#include "../CommonViewUniformBuffer.ush"

#include "../SceneTexturesCommon.ush"
#include "../DeferredShadingCommon.ush"
#include "TressFXVisibilityCommon.ush"



#if SHADER_COMPOSE_SAMPLE

#include "../HeightFogCommon.ush"
#include "../SkyAtmosphereCommon.ush"

int2 OutputResolution;
uint bComposeDofDepth;
uint bEmissiveEnable;

Texture2D<float4>	HairEmissiveTexture;
Texture2D<float>	HairDOFDepthTexture;
Texture2D<uint>		HairSampleCount;
Texture2D<uint4>	HairCategorizationTexture;
Texture2D<uint>		HairVisibilityNodeOffsetAndCount;
Texture2D<float4>	HairLightingSampleBuffer;

float4 EvaluateVolumetric(float3 WorldPosition)
{
	const float3 CameraRelative_WorldPosition = WorldPosition - View.WorldCameraOrigin;
	float4 HeightFogging = CalculateHeightFog(CameraRelative_WorldPosition);
	float4 Fogging = HeightFogging;

	if (FogStruct.ApplyVolumetricFog > 0)
	{
		const uint EyeIndex = 0;
		float3 VolumeUV = ComputeVolumeUV(WorldPosition, View.WorldToClip);
		Fogging = CombineVolumetricFog(HeightFogging, VolumeUV, EyeIndex);
	}
#if USE_PREEXPOSURE 
	Fogging.rgb *= View.PreExposure;
#endif

	if (View.SkyAtmosphereApplyCameraAerialPerspectiveVolume > 0.0f)
	{
		const float OneOverPreExposure = USE_PREEXPOSURE ? View.OneOverPreExposure : 1.0f;
		float4 NDCPosition = mul(float4(WorldPosition.xyz, 1), View.WorldToClip);

		// Sample the aerial perspective (AP).
		Fogging = GetAerialPerspectiveLuminanceTransmittanceWithFogOver(
			View.RealTimeReflectionCapture, 
			View.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize,
			NDCPosition, 
			WorldPosition.xyz * CM_TO_SKY_UNIT, 
			View.WorldCameraOrigin.xyz * CM_TO_SKY_UNIT,
			View.CameraAerialPerspectiveVolume, 
			View.CameraAerialPerspectiveVolumeSampler,
			View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv,
			View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution,
			View.SkyAtmosphereAerialPerspectiveStartDepthKm,
			View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm,
			View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv,
			OneOverPreExposure, 
			Fogging);
	}

	return Fogging;
}

void ComposeSamplePS(
	in FScreenVertexOutput Input,
	out float4 OutColor : SV_Target0,
	out float  OutDepth : SV_DEPTH)
{
	OutColor = 0.0f;
	OutDepth = 0.0f;
	const uint3 PixelCoord = uint3(floor(Input.Position.xy), 0);

	FNodeDescTFX NodeDesc = DecodeNodeDescTFX(HairVisibilityNodeOffsetAndCount.Load(PixelCoord));
	if (NodeDesc.Count == 0)
	{
		discard;
	}

	const FCategorizationDataTFX CatData = DecodeCategorizationDataTFX(HairCategorizationTexture.Load(PixelCoord));
	const float PixelCoverage = min(CatData.PixelCoverage, 1);
	if (PixelCoverage == 0)
		discard;

	const uint TotalNodeCount = HairSampleCount.Load(uint3(0, 0, 0));
	const uint Resolution = uint(ceil(sqrt(float(TotalNodeCount))));

	const float3 ClosetPointWorldPosition = SvPositionToWorld(float4(Input.Position.xy, CatData.ClosestDepth, 1.0));;
	const float4 Volumetric = EvaluateVolumetric(ClosetPointWorldPosition);

	float3 LocalAccColor = 0;
	LOOP
	for (uint SampleIt = 0; SampleIt < NodeDesc.Count; SampleIt++)
	{
		const uint LocalOffset = NodeDesc.Offset + SampleIt;
		const uint2 Coord = uint2(LocalOffset % Resolution, LocalOffset / Resolution);
		const float4 LightingSample = HairLightingSampleBuffer.Load(uint3(Coord,0));
		const float4 EmissiveSample = HairEmissiveTexture.Load(uint3(Coord, 0));
		LocalAccColor += LightingSample.rgb + EmissiveSample.rgb;
	}
	OutColor.rgb = LocalAccColor * Volumetric.a + Volumetric.rgb;

	OutColor.rgb *= PixelCoverage;
	OutColor.a = PixelCoverage;
	OutDepth = CatData.ClosestDepth;
	if (bComposeDofDepth)
	{
		OutDepth = HairDOFDepthTexture.Load(PixelCoord);
	}
}

#endif // SHADER_COMPOSE_SAMPLE
