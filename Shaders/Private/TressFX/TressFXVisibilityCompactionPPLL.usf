//
// Copyright (c) 2016-2022 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//



#include "../Common.ush"
#include "TressFXVisibilityCommon.ush" 

#if PERMUTATION_GROUPSIZE == 0
#define TILE_PIXEL_SIZE_X 8
#define TILE_PIXEL_SIZE_Y 4
#else
#define TILE_PIXEL_SIZE_X 8
#define TILE_PIXEL_SIZE_Y 8
#endif


int2 OutputResolution;
int2 ResolutionOffset;
uint MaxNodeCount;
uint2 ViewportResolution;
uint bSortSampleByDepth;
float DepthTheshold; 
float CosTangentThreshold;
float CoverageThreshold; // Allow to scale the transmittance to compensate its asymptotic behavior 
uint VelocityType;

StructuredBuffer<uint> StartOffsetBufferR;
StructuredBuffer<FMSAAVisDepth> MSAAVisDepthBufferR;

RWTexture2D<uint> OutCompactNodeCounter;
RWTexture2D<uint> OutCompactNodeIndex;
#if PERMUTATION_VISIBILITY
	RWStructuredBuffer<FNodeVisTFX> OutCompactNodeData;
#else
	RWStructuredBuffer<FPackedTressFXSample> OutCompactNodeData;
#endif
RWStructuredBuffer<uint> OutCompactNodeCoord;
RWTexture2D<uint4> OutCategorizationTexture;

#ifndef PERMUTATION_VELOCITY
	#error Velocity permutation needs to be defined
#endif

#define VELOCITY_TYPE_NONE 0
#define VELOCITY_TYPE_AVG 1  
#define VELOCITY_TYPE_CLOSEST 2
#define VELOCITY_TYPE_MAX 3
#if PERMUTATION_VELOCITY != VELOCITY_TYPE_NONE
	RWTexture2D<float2> OutVelocityTexture;
#endif

groupshared uint AllocationNodeCount;
groupshared uint AllocationNodeOffset;


struct FSampleSetDesc
{
	uint   UniqueSampleCount;
	uint   ValidSampleCount;
	uint   HairSampleCount;
};

#if PERMUTATION_VISIBILITY

#ifndef PERMUTATION_MSAACOUNT
	#error PERMUTATION_MSAACOUNT is not defined
#endif

#define MERGE_SAMPLE 0


void ComputeUniqueSamplesWithoutDepthTest(
	inout uint4 OutSamples[PERMUTATION_MSAACOUNT],
	inout FSampleSetDesc OutSet,
	const uint2 PixelCoord)
{
	OutSet.UniqueSampleCount = 0;
	OutSet.ValidSampleCount = 0;
	OutSet.HairSampleCount = PERMUTATION_MSAACOUNT;
	
	uint PPLLBufferIndex = PixelCoord.y*ViewportResolution.x + PixelCoord.x;

	uint PrimitiveId = GetInvalidTressFXPrimitiveId();

	uint Offset = StartOffsetBufferR[PPLLBufferIndex];
	float SampleDepth = 0;
	while(0xFFFFFFFF != Offset)
	{
		FMSAAVisDepth Elem = MSAAVisDepthBufferR[Offset];
		Offset = Elem.Next;
			
		if(Elem.Depth > SampleDepth)
		{
			SampleDepth = Elem.Depth;
			PrimitiveId = Elem.Vis;
		}
	}

	const bool bIsValid = PrimitiveId != GetInvalidTressFXPrimitiveId();
	if (!bIsValid)
		return ;


	++OutSet.ValidSampleCount;
	OutSamples[0].x = PrimitiveId;
	OutSamples[0].y = 1;
	OutSamples[0].z = 0;
	OutSamples[0].w = asuint(SampleDepth);
	++OutSet.UniqueSampleCount;
}


#if PERMUTATION_VIEWTRANSMITTANCE == 1
Texture2D<float> ViewTransmittanceTexture;
#endif

[numthreads(TILE_PIXEL_SIZE_X, TILE_PIXEL_SIZE_Y, 1)]
void MainCS(uint GroupIndex : SV_GroupIndex, uint3 DispatchThreadId : SV_DispatchThreadID)
{
	if (GroupIndex == 0)
	{
		AllocationNodeCount = 0;
		AllocationNodeOffset = 0;
	}

	uint2 PixelCoord = DispatchThreadId.xy + ResolutionOffset;
	if (PixelCoord.x >= uint(OutputResolution.x) || PixelCoord.y >= uint(OutputResolution.y))
		PixelCoord = uint2(0, 0);

	FSampleSetDesc SampleDesc;

	uint4 Samples[PERMUTATION_MSAACOUNT];		// x:PrimitiveId|MaterialId, y:Weight, z:SampleIt, w:Depth (as uint)
	ComputeUniqueSamplesWithoutDepthTest(
		Samples,
		SampleDesc,
		PixelCoord
		);

	FNodeDescTFX NodeDesc;
	NodeDesc.Count = SampleDesc.UniqueSampleCount;
	NodeDesc.Offset = 0;

	if (NodeDesc.Count > 0)
	{
		InterlockedAdd(AllocationNodeCount, NodeDesc.Count, NodeDesc.Offset);
	}
	GroupMemoryBarrierWithGroupSync();
	if (GroupIndex == 0 && AllocationNodeCount > 0)
	{
		InterlockedAdd(OutCompactNodeCounter[uint2(0, 0)], AllocationNodeCount, AllocationNodeOffset);
	}
	GroupMemoryBarrierWithGroupSync();

	// Allocate node space
	FCategorizationDataTFX Categorization = (FCategorizationDataTFX)0;
	if (NodeDesc.Count > 0)
	{
		NodeDesc.Offset += AllocationNodeOffset;

		// Store final sort node data 
		if (NodeDesc.Offset + NodeDesc.Count < MaxNodeCount)
		{
			for (uint OutIndex = 0; OutIndex < NodeDesc.Count; ++OutIndex)
			{
				const FTressFXVisSample VisSample = UnpackTressFXVisSample(Samples[OutIndex].x);

				// VisibilityData.Coverage8bit is a weight normalising to 1 the contribution of all the compacted samples. Because later it is weighted by Categorization.PixelCoverage.
				FNodeVisTFX OutNodeVis;
				OutNodeVis.PrimitiveId	= VisSample.PrimitiveId;
				OutNodeVis.Depth		= asfloat(Samples[OutIndex].w); // MSAA_DepthTexture.Load(PixelCoord, Samples[OutIndex].z);
				OutNodeVis.Coverage8bit = To8bitCoverageTFX(Samples[OutIndex].y / float(SampleDesc.ValidSampleCount));
				OutNodeVis.MaterialId	= VisSample.MaterialId;

				Categorization.TotalCoverage8bit += OutNodeVis.Coverage8bit;
				Categorization.ClosestDepth = max(Categorization.ClosestDepth, OutNodeVis.Depth); // Inverse-Z

				const uint StoreIndex = NodeDesc.Offset + OutIndex;
				OutCompactNodeData[StoreIndex] = OutNodeVis;
				OutCompactNodeCoord[StoreIndex] = (PixelCoord.x & 0xFFFF) | ((PixelCoord.y & 0xFFFF) << 16);
			}

			//NodeDesc.Count = NodeDesc.Count;
			Categorization.SampleCount = NodeDesc.Count;

		#if PERMUTATION_VIEWTRANSMITTANCE == 1
			Categorization.PixelCoverage = TransmittanceToCoverageTFX(ViewTransmittanceTexture.Load(uint3(PixelCoord, 0)), CoverageThreshold);
		#else
			Categorization.PixelCoverage = SampleDesc.ValidSampleCount / float(PERMUTATION_MSAACOUNT);
		#endif
		}
	}

	OutCompactNodeIndex[PixelCoord] = EncodeNodeDescTFX(NodeDesc);
	OutCategorizationTexture[PixelCoord] = EncodeCategorizationDataTFX(Categorization);

}

#else

[numthreads(TILE_PIXEL_SIZE_X, TILE_PIXEL_SIZE_Y, 1)]
void MainCS(uint GroupIndex : SV_GroupIndex, uint3 DispatchThreadId : SV_DispatchThreadID)
{

}

#endif

