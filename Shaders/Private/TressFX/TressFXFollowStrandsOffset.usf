//
// Copyright (c) 2016-2022 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#include "../Common.ush"

#include "TressFXSimulationCommon.ush"


uint StrandsCount;
uint NumFollowStrands;

StructuredBuffer<float2> FollowRootRandomBuffer;
RWStructuredBuffer<float4> FollowRootOffsetBuffer;

Buffer<float4>  GuidesDeformedPositionBuffer;

void GetTangentVectors(in float3 n, out float3 t0, out float3 t1)
{
	if (abs(n[2]) > 0.707)
	{
		float a = n[1] * n[1] + n[2] * n[2];
		float k = 1.0 / sqrt(a);
		t0[0] = 0;
		t0[1] = -n[2] * k;
		t0[2] = n[1] * k;

		t1[0] = a * k;
		t1[1] = -n[0] * t0[2];
		t1[2] = n[0] * t0[1];
	}
	else
	{
		float a = n[0] * n[0] + n[1] * n[1];
		float k = 1.0 / sqrt(a);
		t0[0] = -n[1] * k;
		t0[1] = n[0] * k;
		t0[2] = 0;

		t1[0] = -n[2] * t0[1];
		t1[1] = n[2] * t0[0];
		t1[2] = a * k;
	}
}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void MainCS(uint GIndex : SV_GroupIndex,
                  uint3 GId : SV_GroupID,
                  uint3 DTid : SV_DispatchThreadID)
{
	uint GlobalStrandIndex, NumVerticesInTheStrand, GlobalRootVertexIndex, StrandType;
	CalcIndicesInStrandLevelMaster(GIndex, GId.x, GlobalStrandIndex, NumVerticesInTheStrand, GlobalRootVertexIndex, StrandType);

	float3 v01 = GuidesDeformedPositionBuffer[GlobalRootVertexIndex+1].xyz-GuidesDeformedPositionBuffer[GlobalRootVertexIndex].xyz;
	float3 t0,t1;
	GetTangentVectors(v01,t0,t1);

	uint GlobalFollowBaseIndex = NumFollowStrands*GlobalStrandIndex;
	for(uint i=0;i<NumFollowStrands;++i)
	{
		float2 Random = FollowRootRandomBuffer[GlobalFollowBaseIndex+i];

		FollowRootOffsetBuffer[GlobalFollowBaseIndex+i] = float4(Random.x*t0+Random.y*t1,GlobalRootVertexIndex);
	}

}
