//
// Copyright (c) 2016-2022 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#include "../Common.ush"
#include "../CommonViewUniformBuffer.ush"
#include "../DeferredShadingCommon.ush"
#include "TressFXDeepShadowCommonStruct.ush"


#include "TressFXCommon.ush"
#include "TressFXDeepShadowCommon.ush"
#include "TressFXVisibilityCommon.ush"


#define OPAQUE_MASK_TYPE_DEEP_SHADOW 0


StructuredBuffer<FDeepShadowTransformTFX> DeepShadow_WorldToLightTransformBuffer;
uint				DeepShadow_bIsGPUDriven;

float4x4			DeepShadow_CPUWorldToLightTransform;
uint				bIsWholeSceneLight;
int2				DeepShadow_SlotResolution;
int2				DeepShadow_SlotOffset;
uint				DeepShadow_SlotIndex;
uint				DeepShadow_KernelType;
float				DeepShadow_DepthBiasScale;
float				DeepShadow_DensityScale;
float4				DeepShadow_LayerDepths;


Texture2D<float>	DeepShadow_FrontDepthTexture;
Texture2D<float4>	DeepShadow_DomTexture;

Texture2D<float>	SceneDepthTexture;
Texture2D<uint4>	CategorizationTexture;
RWTexture2D<float4>	OutputColor;

SamplerState		LinearSampler;	
SamplerState 		ShadowSampler;

float4 WriteShadowMaskOutput(const float InFadedShadow)
{
	// Depending of if the light is direction (i.e., WholeSceneLight) or a local light (Point/Spot/Rect), 
	// we change the output layout
	const float EncodedShadow = EncodeLightAttenuation(InFadedShadow);
	return float4(EncodedShadow, EncodedShadow, EncodedShadow, EncodedShadow);
}

#define KERNEL_TYPE_2x2 0 
#define KERNEL_TYPE_4x4 1
#define KERNEL_TYPE_Uniform8 2
#define KERNEL_TYPE_Uniform16 3
#define KERNEL_TYPE_UniformTransmission8 4


float3 TotWorldPosition(float2 UV, float Depth)
{
	float2 ScreenPosition = (UV - View.ScreenPositionScaleBias.wz) / View.ScreenPositionScaleBias.xy;
	float4 HomogeneousWorldPosition = mul(float4(ScreenPosition * Depth, Depth, 1), View.ScreenToWorld);
	float3 WorldPosition = HomogeneousWorldPosition.xyz / HomogeneousWorldPosition.w;

	return WorldPosition;
}

#if PERMUTATION_OPAQUEMASK_TYPE == OPAQUE_MASK_TYPE_DEEP_SHADOW

// Return the light space position of a world space.
// XY: UV of the shadow space
//  Z: Normalized depth value in light clip space
//  W: Positive if the position is valid, negative otherwise
float4 ToLightPosition(float3 WorldPosition)
{
	float4x4 WorldToLightTransform = 0;
	if (DeepShadow_bIsGPUDriven > 0)
	{
		WorldToLightTransform = DeepShadow_WorldToLightTransformBuffer[DeepShadow_SlotIndex].WorldToClip;
	}
	else
	{
		WorldToLightTransform = DeepShadow_CPUWorldToLightTransform;
	}

	float4 LightPos = mul(float4(WorldPosition,1), WorldToLightTransform);
	LightPos.xyz/= LightPos.w;
	const float2 LightUV = (LightPos.xy + float(1).xx) * 0.5f;
	return float4(LightUV.x, 1-LightUV.y, LightPos.z, sign(LightPos.w));
}

bool IsCloser(float DepthA, float DepthB)
{
	// Inversed Z
	return DepthA > DepthB;
}

#define TILE_PIXEL_SIZE 8
#define OPAQUE_PCF 1

struct FHairSamplingSettings
{
	Texture2D<float>ShadowDepthTexture;
	Texture2D<float4>ShadowDomTexture;
	SamplerState	ShadowDepthTextureSampler;
	float2			ShadowAtlasInvResolution;
	float2			ShadowSlotResolution;
	float2			ShadowSlotOffset;
	float			SceneDepth;					// SceneDepth in lightspace.
};

void InternalFetchRowOfThree(float2 Sample00TexelCenter, float VerticalOffset, inout float3 Values0, FHairSamplingSettings Settings)
{
	Values0.x = Settings.ShadowDepthTexture.SampleLevel(Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(0, VerticalOffset)) * Settings.ShadowAtlasInvResolution, 0).r;
	Values0.y = Settings.ShadowDepthTexture.SampleLevel(Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(1, VerticalOffset)) * Settings.ShadowAtlasInvResolution, 0).r;
	Values0.z = Settings.ShadowDepthTexture.SampleLevel(Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(2, VerticalOffset)) * Settings.ShadowAtlasInvResolution, 0).r;
	Values0 = float3(Settings.SceneDepth < Values0);
}

void FetchRowOfFour(float2 Sample00TexelCenter, float VerticalOffset, inout float4 Values0, FHairSamplingSettings Settings)
{
	Values0.x = Settings.ShadowDepthTexture.SampleLevel(Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(0, VerticalOffset)) * Settings.ShadowAtlasInvResolution, 0).r;
	Values0.y = Settings.ShadowDepthTexture.SampleLevel(Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(1, VerticalOffset)) * Settings.ShadowAtlasInvResolution, 0).r;
	Values0.z = Settings.ShadowDepthTexture.SampleLevel(Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(2, VerticalOffset)) * Settings.ShadowAtlasInvResolution, 0).r;
	Values0.w = Settings.ShadowDepthTexture.SampleLevel(Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(3, VerticalOffset)) * Settings.ShadowAtlasInvResolution, 0).r;
	Values0 = float4(Settings.SceneDepth < Values0);
}

float InternalPCF2x2(float2 Fraction, float3 Values0, float3 Values1, float3 Values2)
{
	float3 Results;

	Results.x = Values0.x * (1.0f - Fraction.x);
	Results.y = Values1.x * (1.0f - Fraction.x);
	Results.z = Values2.x * (1.0f - Fraction.x);
	Results.x += Values0.y;
	Results.y += Values1.y;
	Results.z += Values2.y;
	Results.x += Values0.z * Fraction.x;
	Results.y += Values1.z * Fraction.x;
	Results.z += Values2.z * Fraction.x;

	return saturate(0.25f * dot(Results, half3(1.0f - Fraction.y, 1.0f, Fraction.y)));
}

float InternalPCF3x3(float2 Fraction, float4 Values0, float4 Values1, float4 Values2, float4 Values3)
{
	float4 Results;

	Results.x = Values0.x * (1.0f - Fraction.x);
	Results.y = Values1.x * (1.0f - Fraction.x);
	Results.z = Values2.x * (1.0f - Fraction.x);
	Results.w = Values3.x * (1.0f - Fraction.x);
	Results.x += Values0.y;
	Results.y += Values1.y;
	Results.z += Values2.y;
	Results.w += Values3.y;
	Results.x += Values0.z;
	Results.y += Values1.z;
	Results.z += Values2.z;
	Results.w += Values3.z;
	Results.x += Values0.w * Fraction.x;
	Results.y += Values1.w * Fraction.x;
	Results.z += Values2.w * Fraction.x;
	Results.w += Values3.w * Fraction.x;

	return saturate(dot(Results, float4(1.0f - Fraction.y, 1.0f, 1.0f, Fraction.y)) * (1.0f / 9.0f));
}

float InternalManual2x2PCF(float2 ShadowPosition, FHairSamplingSettings Settings)
{
	float2 TexelPos = ShadowPosition * Settings.ShadowSlotResolution + Settings.ShadowSlotOffset;
	float2 Fraction = frac(TexelPos);
	float2 TexelCenter = floor(TexelPos) + 0.5f;
	float2 Sample00TexelCenter = TexelCenter - float2(1, 1);

	float3 SamplesValues0, SamplesValues1, SamplesValues2;
	InternalFetchRowOfThree(Sample00TexelCenter, 0, SamplesValues0, Settings);
	InternalFetchRowOfThree(Sample00TexelCenter, 1, SamplesValues1, Settings);
	InternalFetchRowOfThree(Sample00TexelCenter, 2, SamplesValues2, Settings);

	return InternalPCF2x2(Fraction, SamplesValues0, SamplesValues1, SamplesValues2);
}

float InternalManual4x4PCF(float2 ShadowPosition, FHairSamplingSettings Settings)
{
	float2 TexelPos = ShadowPosition * Settings.ShadowSlotResolution + Settings.ShadowSlotOffset - 0.5f;
	float2 Fraction = frac(TexelPos);
	float2 TexelCenter = floor(TexelPos) + 0.5f;	// bias to get reliable texel center content	
	float2 Sample00TexelCenter = TexelCenter - float2(1, 1);

	float4 SampleValues0, SampleValues1, SampleValues2, SampleValues3;
	FetchRowOfFour(Sample00TexelCenter, 0, SampleValues0, Settings);
	FetchRowOfFour(Sample00TexelCenter, 1, SampleValues1, Settings);
	FetchRowOfFour(Sample00TexelCenter, 2, SampleValues2, Settings);
	FetchRowOfFour(Sample00TexelCenter, 3, SampleValues3, Settings);
	return InternalPCF3x3(Fraction, SampleValues0, SampleValues1, SampleValues2, SampleValues3);
}

float2 InternalHorizontalPCF5x2(float2 Fraction, float4 Values00, float4 Values20, float4 Values40)
{
	float Results0;
	float Results1;

	Results0 = Values00.w * (1.0 - Fraction.x);
	Results1 = Values00.x * (1.0 - Fraction.x);
	Results0 += Values00.z;
	Results1 += Values00.y;
	Results0 += Values20.w;
	Results1 += Values20.x;
	Results0 += Values20.z;
	Results1 += Values20.y;
	Results0 += Values40.w;
	Results1 += Values40.x;
	Results0 += Values40.z * Fraction.x;
	Results1 += Values40.y * Fraction.x;

	return float2(Results0, Results1);
}

float4 InternalGather4(float2 SamplePos, int2 Offset, FHairSamplingSettings Settings)
{
	float4 Values = Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, Offset);
	return float4(
		Settings.SceneDepth < Values.x,
		Settings.SceneDepth < Values.y,
		Settings.SceneDepth < Values.z,
		Settings.SceneDepth < Values.w);
}

// high quality, 6x6 samples, using gather4
float InternalManual7x7PCF(float2 ShadowPosition, FHairSamplingSettings Settings)
{
#if 1
	float2 TexelPos = ShadowPosition * Settings.ShadowSlotResolution + Settings.ShadowSlotOffset - 0.5f;	// bias to be consistent with texture filtering hardware
	float2 Fraction = frac(TexelPos);
	float2 TexelCenter = floor(TexelPos);
	float2 SamplePos = (TexelCenter + 0.5f) / Settings.ShadowSlotResolution;
#else
	float2 TexelPos = ShadowPosition * Settings.ShadowSlotResolution + Settings.ShadowSlotOffset;
	float2 Fraction = frac(TexelPos);
	float2 TexelCenter = floor(TexelPos) + 0.5f;
	float2 SamplePos = (TexelCenter - float2(1, 1)) / Settings.ShadowSlotResolution;
#endif
	float Results;

	float4 Values00 = InternalGather4(SamplePos, int2(-2,-2), Settings);
	float4 Values20 = InternalGather4(SamplePos, int2( 0,-2), Settings);
	float4 Values40 = InternalGather4(SamplePos, int2( 2,-2), Settings);

	float2 Row0 = InternalHorizontalPCF5x2(Fraction, Values00, Values20, Values40);
	Results = Row0.x * (1.0f - Fraction.y) + Row0.y;

	float4 Values02 = InternalGather4(SamplePos, int2(-2,0), Settings);
	float4 Values22 = InternalGather4(SamplePos, int2( 0,0), Settings);
	float4 Values42 = InternalGather4(SamplePos, int2( 2,0), Settings);

	float2 Row1 = InternalHorizontalPCF5x2(Fraction, Values02, Values22, Values42);
	Results += Row1.x + Row1.y;

	float4 Values04 = InternalGather4(SamplePos, int2(-2,2), Settings);
	float4 Values24 = InternalGather4(SamplePos, int2( 0,2), Settings);
	float4 Values44 = InternalGather4(SamplePos, int2( 2,2), Settings);

	float2 Row2 = InternalHorizontalPCF5x2(Fraction, Values04, Values24, Values44);
	Results += Row2.x + Row2.y * Fraction.y;

	return 0.04f * Results;
}

float InternalUniformFilter(float2 ShadowPosition, FHairSamplingSettings Settings, uint SampleCount)
{
	float2 SobolSamples[16] =
	{
			float2(0.5,-0.5),
			float2(-0.5,0.5),
			float2(-0.25,-0.25),
			float2(0.75,0.75),
			float2(0.25,-0.75),
			float2(-0.75,0.25),
			float2(-0.625,-0.375),
			float2(0.375,0.625),
			float2(0.875,-0.875),
			float2(-0.125,0.125),
			float2(-0.375,-0.625),
			float2(0.625,0.375),
			float2(0.125,-0.125),
			float2(-0.875,0.875),
			float2(-0.8125,-0.0625),
			float2(0.1875,0.9375)
	};

	const float SampleRadius = 3.f / Settings.ShadowSlotResolution.x;
	float AccShadow = 0;
	for (uint SampleIt = 0; SampleIt < SampleCount; ++SampleIt)
	{
		const float2 Offset = SobolSamples[SampleIt] * SampleRadius;
		const float2 SamplePosition = ShadowPosition + Offset;
		AccShadow += InternalManual2x2PCF(SamplePosition, Settings);
	}

	AccShadow /= SampleCount;
	return AccShadow;
}

float InternalUniformTransmissionFilter(float3 ShadowPosition, FHairSamplingSettings Settings, uint SampleCount)
{

	float2 SobolSamples[16] =
	{
			float2(0.5,-0.5),
			float2(-0.5,0.5),
			float2(-0.25,-0.25),
			float2(0.75,0.75),
			float2(0.25,-0.75),
			float2(-0.75,0.25),
			float2(-0.625,-0.375),
			float2(0.375,0.625),
			float2(0.875,-0.875),
			float2(-0.125,0.125),
			float2(-0.375,-0.625),
			float2(0.625,0.375),
			float2(0.125,-0.125),
			float2(-0.875,0.875),
			float2(-0.8125,-0.0625),
			float2(0.1875,0.9375)
	};

	const float SampleRadius = 3.f / Settings.ShadowSlotResolution.x;
	float AccHairCount = 0;
	for (uint SampleIt = 0; SampleIt < SampleCount; ++SampleIt)
	{
		const float2 Offset = SobolSamples[SampleIt] * SampleRadius;
		const float DepthBias = DeepShadow_LayerDepths[0] * DeepShadow_DepthBiasScale;
		const float3 LightSpacePositionInAtlas = (ShadowPosition+float3(Offset,0)) * float3(DeepShadow_SlotResolution, 1) + float3(DeepShadow_SlotOffset, 0);
		const float HairCount = TFXSampleDOM_PCF2x2(LightSpacePositionInAtlas.xyz, DepthBias, DeepShadow_LayerDepths, Settings.ShadowDepthTexture, Settings.ShadowDomTexture);
		AccHairCount += saturate(HairCount);
	}

	AccHairCount /= SampleCount;
	return AccHairCount;
}

void MainPS(
	FScreenVertexOutput Input,
	out float4 OutColor : SV_Target0)
{
	const float2 UV = Input.UV;
	const uint2 PixelCoord = floor(Input.Position.xy);
	const float SceneDepth = ConvertFromDeviceZ(SceneDepthTexture.Load(uint3(PixelCoord, 0)));
	const FCategorizationDataTFX Categorization = DecodeCategorizationDataTFX(CategorizationTexture.Load(uint3(PixelCoord, 0)));
	const bool bIsHairPixel = Categorization.PixelCoverage >= 1;

	const float3 WorldPosition		= TotWorldPosition(UV, SceneDepth);
	const float4 LightSpacePosition = ToLightPosition(WorldPosition);

	// PCF or simple point sampler
	float Visibility = 1;
	const bool bIsValid =
		LightSpacePosition.w > 0 &&
		(LightSpacePosition.x >= 0 && LightSpacePosition.x <= 1) &&
		(LightSpacePosition.y >= 0 && LightSpacePosition.y <= 1);
	if (!bIsHairPixel && bIsValid)
	{
		uint2 ShadowAtlasResolution;
		DeepShadow_FrontDepthTexture.GetDimensions(ShadowAtlasResolution.x, ShadowAtlasResolution.y);

	#if OPAQUE_PCF == 1
		FHairSamplingSettings ShadowSettings;
		ShadowSettings.ShadowDepthTexture = DeepShadow_FrontDepthTexture;
		ShadowSettings.ShadowDomTexture = DeepShadow_DomTexture;
		ShadowSettings.ShadowDepthTextureSampler = ShadowSampler;
		ShadowSettings.ShadowAtlasInvResolution = 1 / float2(ShadowAtlasResolution);
		ShadowSettings.ShadowSlotResolution = DeepShadow_SlotResolution;
		ShadowSettings.ShadowSlotOffset = DeepShadow_SlotOffset;
		ShadowSettings.SceneDepth = saturate(LightSpacePosition.z);
		#if PERMUTATION_KERNEL_TYPE == KERNEL_TYPE_4x4
			Visibility = 1 - InternalManual4x4PCF(LightSpacePosition.xy, ShadowSettings);
		#elif PERMUTATION_KERNEL_TYPE == KERNEL_TYPE_Uniform8		
			Visibility = 1 - InternalUniformFilter(LightSpacePosition.xy, ShadowSettings, 8);
		#elif PERMUTATION_KERNEL_TYPE == KERNEL_TYPE_Uniform16
			Visibility = 1 - InternalUniformFilter(LightSpacePosition.xy, ShadowSettings, 16);
		#elif PERMUTATION_KERNEL_TYPE == KERNEL_TYPE_UniformTransmission8
			Visibility = 1 - InternalUniformTransmissionFilter(LightSpacePosition.xyz, ShadowSettings, 8);
		#else//PERMUTATION_KERNEL_TYPE == KERNEL_TYPE_2x2
			Visibility = 1 - InternalManual2x2PCF(LightSpacePosition.xy, ShadowSettings);
		#endif	
	#else
		const float FrontDepth = DeepShadow_FrontDepthTexture.SampleLevel(LinearSampler, LightSpacePosition.xy, 0);
		const float ShadowBias = 0;
		Visibility = IsCloser(FrontDepth + ShadowBias, LightSpacePosition.z) ? 0 : 1;
	#endif
	}
	OutColor = WriteShadowMaskOutput(Visibility);

}
#endif
