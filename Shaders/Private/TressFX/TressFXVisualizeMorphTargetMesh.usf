//
// Copyright (c) 2016-2022 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//



#include "../Common.ush"

//-----------MorphTarget Mesh-------------------

StructuredBuffer<float3>		MeshVertexBuffer;

struct FTressFXVisualizeMTMeshVSToPS
{
	float4 SvPosition : SV_POSITION;
	float4 Color : TEXCOORD0;
};

void MeshMainVS(
	uint VertexID : SV_VertexID,
	out FTressFXVisualizeMTMeshVSToPS Output)
{
	float3 VertexPos = MeshVertexBuffer[VertexID];
	
	Output.SvPosition = mul(float4(VertexPos,1),View.WorldToClip);
	
	Output.Color = float4(1,0,0,0);

	if(VertexPos.x == 0 && VertexPos.y == 0 && VertexPos.z == 0)
		Output.Color = float4(0,0,1,0);

}

void MeshMainPS(
	FTressFXVisualizeMTMeshVSToPS Input,
	out float4 OutColor : SV_Target0
	)
{
	if(Input.Color.z > 0)
		discard;
	//
	OutColor = Input.Color;
}

