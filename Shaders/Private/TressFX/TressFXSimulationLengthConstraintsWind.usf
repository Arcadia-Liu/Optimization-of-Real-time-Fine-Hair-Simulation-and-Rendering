//
// Copyright (c) 2016-2022 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//


#include "../Common.ush"
#include "TressFXSimulationCommon.ush"

uint LengthConstraintsIterations;
float MaxRestLength;

#define ClampPositionDelta 0.3

float TimeStep;
float4 Wind0;
float4 Wind1;
float4 Wind2;
float4 Wind3;


RWBuffer<float4> GuidesDeformedPositionBuffer; 
RWBuffer<float4> GuidesDeformedPrevPositionBuffer;

groupshared float4 SharedPos[THREAD_GROUP_SIZE];




float2 ConstraintMultiplier(float4 particle0, float4 particle1)
{
    if (IsMovable(asuint(particle0.w)))
    {
        if (IsMovable(asuint(particle1.w)))
            return float2(0.5, 0.5);
        else
            return float2(1, 0);
    }
    else
    {
        if (IsMovable(asuint(particle1.w)))
            return float2(0, 1);
        else
            return float2(0, 0);
    }
}

void ApplyDistanceConstraint(inout float4 pos0, inout float4 pos1, float stiffness = 1.0)
{
	const uint VertexW = asuint(pos0.w);
	float targetDistance = ((VertexW & 0xFF00) >> 8)*MaxRestLength/255.f;
    float3 delta = pos1.xyz - pos0.xyz;
    float distance = max(length(delta), 1e-7);
    float stretching = 1 - targetDistance / distance;
    delta = stretching * delta;
    float2 multiplier = ConstraintMultiplier(pos0, pos1);

    pos0.xyz += multiplier[0] * delta * stiffness;
    pos1.xyz -= multiplier[1] * delta * stiffness;
}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void LengthConstraintsWindAndCollision(uint GIndex : SV_GroupIndex,
	                          uint3 GId : SV_GroupID,
	                          uint3 DTid : SV_DispatchThreadID)
{
    uint GlobalStrandIndex, LocalStrandIndex, GlobalVertexIndex, LocalVertexIndex, NumVerticesInTheStrand, IndexForSharedMem, StrandType;
    CalcIndicesInVertexLevelMaster(GIndex, GId.x, GlobalStrandIndex, LocalStrandIndex, GlobalVertexIndex, LocalVertexIndex, NumVerticesInTheStrand, IndexForSharedMem, StrandType);
	
    uint numOfStrandsPerThreadGroup = NumOfStrandsPerThreadGroup;

	SharedPos[IndexForSharedMem] = GuidesDeformedPositionBuffer[GlobalVertexIndex];

    GroupMemoryBarrierWithGroupSync();

	//------------
    // Wind
    //------------
    if ( Wind0.x != 0 || Wind0.y != 0 || Wind0.z != 0 )
    {
        if ( LocalVertexIndex >= 2 && LocalVertexIndex < NumVerticesInTheStrand-1 )
        {
            // combining four winds.
            float a = ((float)(GlobalStrandIndex % 20))/20.0f;
            float3  w = a*Wind0.xyz + (1.0f-a)*Wind1.xyz + a*Wind2.xyz + (1.0f-a)*Wind3.xyz;

            uint SharedIndex = LocalVertexIndex * NumOfStrandsPerThreadGroup + LocalStrandIndex;

            float3 v = SharedPos[SharedIndex].xyz - SharedPos[SharedIndex+NumOfStrandsPerThreadGroup].xyz;
            float3 Force = -cross(cross(v, w), v);
            SharedPos[SharedIndex].xyz += Force*TimeStep*TimeStep;
        }
    }

    GroupMemoryBarrierWithGroupSync();


	// Enforce length constraints
    uint a = floor(NumVerticesInTheStrand/2.0f);
    uint b = floor((NumVerticesInTheStrand-1)/2.0f);

    uint nLengthContraintIterations = LengthConstraintsIterations;

    for ( int iterationE=0; iterationE < nLengthContraintIterations; iterationE++ )
    {
        uint SharedIndex = 2*LocalVertexIndex * numOfStrandsPerThreadGroup + LocalStrandIndex;

        if( LocalVertexIndex < a )
            ApplyDistanceConstraint(SharedPos[SharedIndex], SharedPos[SharedIndex+numOfStrandsPerThreadGroup]);

        GroupMemoryBarrierWithGroupSync();

        if( LocalVertexIndex < b )
            ApplyDistanceConstraint(SharedPos[SharedIndex+numOfStrandsPerThreadGroup], SharedPos[SharedIndex+numOfStrandsPerThreadGroup*2]);

        GroupMemoryBarrierWithGroupSync();
    }
	 
	//---------------------------------------
    // clamp velocities, rewrite history
    //---------------------------------------
    float4 OldPos = GuidesDeformedPrevPositionBuffer[GlobalVertexIndex];
	float3 PositionDelta = SharedPos[IndexForSharedMem].xyz - OldPos;
	float SpeedSqr = dot(PositionDelta, PositionDelta);
	if ( SpeedSqr > ClampPositionDelta * ClampPositionDelta ) 
	{
		PositionDelta *= ClampPositionDelta * ClampPositionDelta / SpeedSqr;
		GuidesDeformedPrevPositionBuffer[GlobalVertexIndex] = float4(SharedPos[IndexForSharedMem].xyz - PositionDelta,SharedPos[IndexForSharedMem].w);
	}

    GuidesDeformedPositionBuffer[GlobalVertexIndex] = SharedPos[IndexForSharedMem];
}

