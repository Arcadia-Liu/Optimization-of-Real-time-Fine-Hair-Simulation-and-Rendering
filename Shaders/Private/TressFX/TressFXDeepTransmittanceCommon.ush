//
// Copyright (c) 2016-2022 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#pragma once

////////////////////////////////////////////////////////////////////////////////////////////////////

struct FTressFXTransmittanceMask
{
	float3 Transmittance;
	float HairCount;
	float Visibility;
};

struct FPackedTressFXTransmittanceMask
{
	float3 Transmittance;
	uint PackedHairCountAndVisibility;
};

FPackedTressFXTransmittanceMask InitNullPackedTressFXTransmittanceMask()
{
	FPackedTressFXTransmittanceMask Out;
	Out.Transmittance = 0;
	Out.PackedHairCountAndVisibility = 0;
	return Out;
}

FTressFXTransmittanceMask InitTressFXTransmittanceMask()
{
	FTressFXTransmittanceMask Out;
	Out.Transmittance = 1;
	Out.HairCount = 0;
	Out.Visibility = 1;
	return Out;
}

FPackedTressFXTransmittanceMask PackTransmittanceMaskTFX(FTressFXTransmittanceMask In)
{
	FPackedTressFXTransmittanceMask Out;
	Out.Transmittance = In.Transmittance;
	Out.PackedHairCountAndVisibility = min(uint(In.HairCount * 1000), uint(0x00FFFFFF)) | (min(uint(In.Visibility * 0xFF), uint(0xFF)) << 24);
	return Out;
}

FTressFXTransmittanceMask UnpackTransmittanceMaskTFX(FPackedTressFXTransmittanceMask  In)
{
	FTressFXTransmittanceMask Out;
	Out.Transmittance = In.Transmittance;
	Out.HairCount = float(In.PackedHairCountAndVisibility & 0x00FFFFFF) / 1000.f;
	Out.Visibility = float((In.PackedHairCountAndVisibility & 0xFF000000) >> 24) / 255.f;
	return Out;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

struct FTransmittanceSettingsTFX
{
	int2	 DeepShadowResolution;
	int2	 DeepShadowOffset;
	float4x4 WorldToLightTransform;
	float3   LightDirection;
	float4   LightPosition;

	float    DeepShadowDepthBiasScale;
	float    DeepShadowDensityScale;
	float	 TransmittanceKernelApertureInDegree;
	float3   Random;
	uint	 DebugMode;

	uint TransmittanceKernelType;
};

FTressFXTransmittanceMask TFXComputeTransmittanceFromHairCount(float HairCount, float HairVisibility, FGBufferData GBuffer, float SinLightAngle, Texture3D<float4> InHairScatteringLUTTexture, SamplerState InHairLUTSampler)
{
	const FTressFXAverageScattering AbsorptionData = SampleTressFXLUT(InHairScatteringLUTTexture, InHairLUTSampler, GBuffer.BaseColor, GBuffer.Roughness, SinLightAngle);

	// Always shift the hair count by one to remove self-occlusion/shadow aliasing and have smootheer transition
	// This insure the the pow function always starts at 0 for front facing hair
	FTressFXTransmittanceMask Out;
	Out.HairCount = max(0, HairCount - 1);
	Out.Transmittance = pow(AbsorptionData.A_front, Out.HairCount);
	Out.Visibility = HairVisibility;

	return Out;
}