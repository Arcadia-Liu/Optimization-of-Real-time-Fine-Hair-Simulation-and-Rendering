//
// Copyright (c) 2016-2022 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//


#include "../Common.ush"


#define MAX_TressFX_LOD 8

struct FTressFXClusterInfo
{
	uint  LODCount;
	uint  LODInfoOffset;
	float LOD0_ScreenSize;
	float LOD1_ScreenSize;
	float LOD2_ScreenSize;
	float LOD3_ScreenSize;
	float LOD4_ScreenSize;
	float LOD5_ScreenSize;
	float LOD6_ScreenSize;
	float LOD7_ScreenSize;
	uint  LOD_bIsVisible;
};

struct FPackedTressFXClusterLODInfo
{
	uint VertexOffset;
	uint VertexCount0;
	uint VertexCount1;
	uint RadiusScale01;
};

struct FTressFXClusterLODInfo
{
	uint VertexOffset;
	uint VertexCount0;
	uint VertexCount1;
	float RadiusScale0;
	float RadiusScale1;
};

FTressFXClusterLODInfo UnpackTressFXClusterLODInfo(FPackedTressFXClusterLODInfo In)
{
	FTressFXClusterLODInfo Out;
	Out.VertexOffset = In.VertexOffset;
	Out.VertexCount0 = In.VertexCount0;
	Out.VertexCount1 = In.VertexCount1;
	Out.RadiusScale0 = f16tof32(0xFFFF & (In.RadiusScale01));
	Out.RadiusScale1 = f16tof32(0xFFFF & (In.RadiusScale01 >> 16));
	return Out;
}

////////////////////////////////////////////////////////////////////////////////

struct FTressFXClusterLOD
{
	uint  VertexOffset;
	uint  VertexCount;
	float RadiusScale;
	float LOD;
};


// Compute the screen size of a bounding sphere
// This is the equivalent of ComputeBoundsScreenSize in SceneManagement.h
float ComputeBoundsScreenSizeTFX(float3 InSphereOrigin, float InSphereRadius, float3 InViewOrigin, float4x4 InProjMatrix)
{
	const float Dist = distance(InSphereOrigin, InViewOrigin);

	// Get projection multiple accounting for view scaling.
	const float ScreenMultiple = max(0.5f * InProjMatrix[0].x, 0.5f * InProjMatrix[1].y);

	// Calculate screen-space projected radius
	const float ScreenRadius = ScreenMultiple * InSphereRadius / max(1.0f, Dist);

	// For clarity, we end up comparing the diameter
	return ScreenRadius * 2.0f;
}
