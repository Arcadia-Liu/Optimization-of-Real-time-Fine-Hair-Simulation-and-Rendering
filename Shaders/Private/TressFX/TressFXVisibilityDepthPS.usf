//
// Copyright (c) 2016-2022 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//



#include "../Common.ush"

#include "../SceneTexturesCommon.ush"
#include "../DeferredShadingCommon.ush"
#include "TressFXVisibilityCommon.ush"

Texture2D<uint4> CategorisationTexture;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#if PERMUTATION_OUTPUT_TYPE == 0
void MainPS(
	in FScreenVertexOutput Input,
	out float SvDepth		: SV_DEPTH,
	out float4 OutGBufferB	: SV_Target0,
	out float4 OutGBufferC	: SV_Target1,
	out float4 OutColor		: SV_Target2
)
{
	const FCategorizationDataTFX CategorisationData = DecodeCategorizationDataTFX(CategorisationTexture.Load(uint3(Input.Position.xy, 0)));
	if (CategorisationData.PixelCoverage < 1.0f)
	{
		discard;
	}

	// Add a depth bias in order to avoid precision issue during the composition pass, which would reject certain samples.
	// This depth is only used for screen passes like AO/SSGI/... so no need to be very accurate
	const float DepthBias = 0.001f; 
	SvDepth = CategorisationData.ClosestDepth-DepthBias;
	OutGBufferB = float4(0, 0, 0, 0); // EncodeShadingModelIdAndSelectiveOutputMask(SHADINGMODELID_HAIR, 0)
	OutGBufferC = 0;
	OutColor = 0;
}
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#if PERMUTATION_OUTPUT_TYPE == 1
void MainPS(
	in FScreenVertexOutput Input,
	out float SvDepth : SV_DEPTH)
{
	const FCategorizationDataTFX CategorisationData = DecodeCategorizationDataTFX(CategorisationTexture.Load(uint3(Input.Position.xy, 0)));
	if (CategorisationData.PixelCoverage > 0.0f)
	{
		SvDepth = CategorisationData.ClosestDepth;
	}
	else
	{
		SvDepth = 0; // Inverse-Z|
	}

}
#endif