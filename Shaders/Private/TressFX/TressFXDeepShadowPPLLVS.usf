//
// Copyright (c) 2016-2022 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
#include "TressFXDeepShadowCommonStruct.ush"

#include "../Common.ush"
#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"

#include "TressFXVisibilityCommon.ush"

#define MESH_RENDER_DEPTH 0
#define MESH_RENDER_DOM   1

#ifndef SUPPORT_TANGENT_PROPERTY
#define SUPPORT_TANGENT_PROPERTY 0
#endif

#ifndef SUPPORT_MATERIAL_PROPERTY
#define SUPPORT_MATERIAL_PROPERTY 0
#endif

struct FDeepShadowAccumulateVSToPS
{
#if SUPPORT_TANGENT_PROPERTY == 1 || SUPPORT_MATERIAL_PROPERTY == 1
	FVertexFactoryInterpolantsVSToPS Interpolants;
#endif
	float4 Position : SV_POSITION;

#if MESH_RENDER_MODE == MESH_RENDER_DOM
	float HairCoverage : CUSTOM_COVERAGE;
#endif
};

#define VS_OUTPUT_TYPE FDeepShadowAccumulateVSToPS
#define SUPPORT_WPO 0


#if VERTEXSHADER 

/** transform mesh as normal */
void Main(
	FVertexFactoryInput Input,
	OPTIONAL_VertexID
	out VS_OUTPUT_TYPE Output
)
{
	ResolvedView = ResolveView();

	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);

#if MESH_RENDER_MODE == MESH_RENDER_DEPTH || MESH_RENDER_MODE == MESH_RENDER_DOM
	float4x4 WorldToClipMatrix = PPLLTFXPass.CPU_WorldToClipMatrix;
#endif

#ifdef VF_STRAND_TRESSFX	
	const FTressFXRenderInfo HairRenderInfo = GetTressFXRenderInfo(ResolvedView.HairRenderInfo, ResolvedView.HairRenderInfoBits);

	FTressFXViewInfo HairViewInfo;
	HairViewInfo.TranslatedWorldCameraOrigin = ResolvedView.TranslatedWorldCameraOrigin;
	HairViewInfo.ViewForward = ResolvedView.ViewForward;
	HairViewInfo.RadiusAtDepth1 = HairRenderInfo.RadiusAtDepth1Primary;
	HairViewInfo.bIsOrthoView = HairRenderInfo.bIsOrthoView;
	
	#if MESH_RENDER_MODE == MESH_RENDER_DEPTH || MESH_RENDER_MODE == MESH_RENDER_DOM
	if (HairRenderInfo.bIsGPUDriven)
	{
		const uint AtlasSlotIndex = PPLLTFXPass.AtlasSlotIndex;
		FDeepShadowViewInfoTFX DeepShadowViewInfo = PPLLTFXPass.DeepShadowViewInfoBuffer[AtlasSlotIndex];
		WorldToClipMatrix			= DeepShadowViewInfo.WorldToClip;
		HairViewInfo.ViewForward	= DeepShadowViewInfo.ViewForward;
		HairViewInfo.RadiusAtDepth1 = DeepShadowViewInfo.MinRadiusAtDepth1;
	}
	#endif
	
	float4 WorldPosition = VertexFactoryGetWorldPosition(Input, VFIntermediates, HairViewInfo);

#endif

	WorldPosition.xyz -= ResolvedView.PreViewTranslation.xyz; // Remove the camera relative position (todo move this into matrix transform)

	Output.Position = mul(WorldPosition, WorldToClipMatrix);
	
	float HairCoverage = 1;
  #ifdef VF_STRAND_TRESSFX	
	const float CurrentDepth = Output.Position.z / Output.Position.w;
	const float PixelRadius = HairRenderInfo.bIsOrthoView ? HairRenderInfo.RadiusAtDepth1Primary : (CurrentDepth * HairRenderInfo.RadiusAtDepth1Primary);
	const float StrandRealRadius = VFIntermediates.HairDimensions.y;
	const float Coverage = StrandRealRadius / max(StrandRealRadius, PixelRadius);
	HairCoverage = Coverage * VFIntermediates.HairDensity;
  #endif

  #if MESH_RENDER_MODE == MESH_RENDER_DOM
	Output.HairCoverage = HairCoverage;
  #endif
  
	OutputVertexID( Output );

}

#endif