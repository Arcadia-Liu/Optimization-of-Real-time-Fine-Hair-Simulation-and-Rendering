//
// Copyright (c) 2016-2022 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#pragma once

#define RENDER_MODE_MSAA 0
#define RENDER_MODE_TRANSMITTANCE 1
#define RENDER_MODE_PPLL 2
#define RENDER_MODE_MSAA_VISIBILITY 3
#define RENDER_MODE_TRANSMITTANCE_AND_HAIRCOUNT 4


#define TRESSFX_VISIBILITY_GROUP_COUNT_WIDTH 64

#include "TressFXVisibilityCommonStruct.ush"

struct FCategorizationDataTFX
{
	uint  TotalCoverage8bit;
	uint  SampleCount;
	float PixelCoverage;
	float ClosestDepth;
};

uint4 EncodeCategorizationDataTFX(FCategorizationDataTFX Data)
{
	const uint ClosestDepthUint = asuint(Data.ClosestDepth);
	const uint ClosestDepthLow  = ClosestDepthUint & 0xFFFF;
	const uint ClosestDepthHigh	= (ClosestDepthUint >> 16) & 0xFFFF;
	const uint ComponentX		= min(Data.TotalCoverage8bit, uint(0xFF)) | ((Data.SampleCount & 0xFF)<<8);
	return uint4(ComponentX, f32tof16(Data.PixelCoverage), ClosestDepthLow, ClosestDepthHigh);
}

FCategorizationDataTFX DecodeCategorizationDataTFX(uint4 Data)
{
	FCategorizationDataTFX Out;
	Out.TotalCoverage8bit		= Data.x & 0xFF;
	Out.SampleCount				=(Data.x>>8) & 0xFF;
	Out.PixelCoverage			= f16tof32(Data.y);
	const uint ClosestDepthLow	= Data.z & 0xFFFF;
	const uint ClosestDepthHigh	=(Data.w & 0xFFFF) << 16;
	Out.ClosestDepth			= asfloat(ClosestDepthHigh | ClosestDepthLow);

	return Out;
}

float TransmittanceToCoverageTFX(float InTransmittance, float InCoverageThreashold)
{
	return saturate(min(1 - InTransmittance, 1) / InCoverageThreashold);
}

float3 EncodeTangentTFX(float3 N)
{
	return N * 0.5 + 0.5;
}

float3 DecodeTangentTFX(float3 N)
{
	return N * 2 - 1;
}

uint float4ToUintTFX(float4 v)
{
	uint4 i = uint4(v.x * 255, v.y * 255, v.z * 255, v.w * 255);
	return (0xFF & i.w) << 24 | (0xFF & i.z) << 16 | (0xFF & i.y) << 8 | (0xFF & i.x);
}

float4 UintToFloat4TFX(uint In)
{
	uint4 Out;
	Out.x = (0xFF &  In);
	Out.y = (0xFF & (In >> 8));
	Out.z = (0xFF & (In >> 16));
	Out.w = (0xFF & (In >> 24));
	return Out / 255.f;
}

uint Uint16ToUint32TFX(uint2 In)
{
	return (In.x & 0xFFFF) | ((In.y & 0xFFFF) << 16);
}

uint2 Uint32ToUint16TFX(uint In)
{
	uint2 A;
	A.x = In & 0xFFFF;
	A.y = (In >> 16) & 0xFFFF;
	return A;
}

uint Float16ToUint32TFX(float2 In)
{
	return Uint16ToUint32TFX(f32tof16(In));
}

float2 Uint32ToFloat16TFX(uint In)
{
	return f16tof32(Uint32ToUint16TFX(In));
}

uint To8bitCoverageTFX(float Coverage)
{
	return min(uint(Coverage * 0x100), 0xFFu);
}

float From8bitCoverageTFX(uint Coverage8bit)
{
	return float(Coverage8bit) / 255.f;
}

uint To16bitCoverageTFX(float Coverage)
{
	return min(uint(Coverage * 0x10000u), 0xFFFFu);
}

float From16bitCoverageTFX(uint Coverage16bit)
{
	return float(Coverage16bit) / float(0xFFFF);
}

uint3 QuantizeTo8BitsTFX(float3 T)
{
	const float3 Quanta = saturate((T + float(1).xxx) * 0.5f) * 0xFF;
	return uint3(Quanta.x, Quanta.y, Quanta.z);
}

float3 From8bitsTFX(float3 In8bits)
{
	return (normalize(In8bits / 255.f) * 2) - float(1).xxx;
}

uint PackVelocityTFX(float2 EncodedVelocity)
{
	return f32tof16(EncodedVelocity.x) << 16 | f32tof16(EncodedVelocity.y);
}

float2 UnpackVelocityTFX(uint PackedVelocity)
{
	return float2(f16tof32(PackedVelocity >> 16), f16tof32(PackedVelocity));
}

struct FTressFXRenderInfo
{
	float RadiusAtDepth1Primary;
	float RadiusAtDepth1Velocity;
	float VelocityMagnitudeScale;

	bool bIsOrthoView;
	bool bIsGPUDriven;

	float3 ViewForward;
	float3 TranslatedWorldCameraOrigin;
};

FTressFXRenderInfo GetTressFXRenderInfo(float4 ViewHairRenderInfo, uint ViewHairRenderInfoBits, bool bUseScableRasterization=false)
{
	FTressFXRenderInfo Info;
	Info.RadiusAtDepth1Primary  = bUseScableRasterization ? ViewHairRenderInfo.y : ViewHairRenderInfo.x;
	Info.RadiusAtDepth1Velocity = ViewHairRenderInfo.z;
	Info.VelocityMagnitudeScale = ViewHairRenderInfo.w;

	const uint BitField = ViewHairRenderInfoBits;
	Info.bIsOrthoView = (BitField & 0x1) != 0;
	Info.bIsGPUDriven = (BitField & 0x2) != 0;

	return Info;
}
 

struct FTressFXViewInfo
{
	float3 TranslatedWorldCameraOrigin;
	float3 ViewForward;
	float  RadiusAtDepth1;
	bool	bIsOrthoView;
};

 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 // TressFX visibility buffer 

// Renamed into FTressFXHairNodeVisFat
struct FNodeVisTFX // 128 bit aligments. TODO: Move the coverage computation into the material evaluation for saving 64 bits? 
{
	float Depth;		// 32 bits
	uint  PrimitiveId;	// 32 bits
	uint  MaterialId;	//  8 bits : this could be packed into a the 3 high bits of PrimitiveId: up to 8 material on screen
	uint  Coverage8bit;	//  8 bits
};

struct FTressFXVisSample
{
	uint PrimitiveId;
	uint MaterialId;
};

struct FPackedTressFXSample
{
	float Depth;
	uint  PrimitiveID_MacroGroupID;
	uint  Tangent_Coverage8bit;
	uint  BaseColor_Roughness;
	uint  Specular_LightChannels_Backlit;
};

struct FTressFXSample
{
	float	Depth;
	float3	Tangent;
	uint	Coverage8bit;
	uint	PrimitiveId;
	uint	MacroGroupId;
	float3	BaseColor;
	float	Roughness;
	float	Specular;
	float	Backlit;
	uint	LightChannelMask;
	bool	bScatterSceneLighting;
	float3  Emissive;
};

FPackedTressFXSample PackTressFXSample(const FTressFXSample In)
{
	FPackedTressFXSample Out;

	// Tangent and Coverage
	// Encode into 1 x 32bits uint
	// Coverage is clamped o 255 as we only have 8 bits to store its value
	const float3 T = saturate(EncodeTangentTFX(In.Tangent));
	Out.Tangent_Coverage8bit =
		((0xFF & uint(T.x * 255)))      | 
		((0xFF & uint(T.y * 255)) << 8) |
		((0xFF & uint(T.z * 255)) << 16)| 
		(min(uint(0xFF), In.Coverage8bit) << 24);

	// PrimitiveId and MacroGroupId
	// Encode into 1 x 32bits uint
	// PrimitiveId is on 28bits | MacroGroupId is on 4bits
	Out.PrimitiveID_MacroGroupID = 
		((In.PrimitiveId  & 0x0FFFFFFF)) |
		((In.MacroGroupId & 0xF) << 28);

	Out.Depth					= In.Depth;																			// 32bits float
	Out.BaseColor_Roughness		= float4ToUintTFX(float4(sqrt(In.BaseColor), In.Roughness));							// 32bits uint
	Out.Specular_LightChannels_Backlit = 
		clamp(uint(In.Specular * 0xFF), 0, 0xFF) | 
		((In.LightChannelMask & 0x7) << 8)  | 
		((In.bScatterSceneLighting ? 1 : 0) << 12) |
		(clamp(uint(In.Backlit * 0xFF), 0, 0xFF) << 16);

	// Emissive is not packed/unpacked
	return Out;
}

FTressFXSample UnpackTressFXSample(const FPackedTressFXSample In)
{
	FTressFXSample Out;
	Out.Depth = In.Depth;

	Out.Tangent = DecodeTangentTFX(float3(
		float((In.Tangent_Coverage8bit)       & 0xFF) / 255.f,
		float((In.Tangent_Coverage8bit >> 8)  & 0xFF) / 255.f,
		float((In.Tangent_Coverage8bit >> 16) & 0xFF) / 255.f));
	Out.Coverage8bit = (In.Tangent_Coverage8bit >> 24) & 0xFF;

	Out.PrimitiveId  = In.PrimitiveID_MacroGroupID & 0x0FFFFFFF;
	Out.MacroGroupId = (In.PrimitiveID_MacroGroupID>>28) & 0xF;

	const float4 BaseColorAndRoughness = UintToFloat4TFX(In.BaseColor_Roughness);
	Out.BaseColor			= BaseColorAndRoughness.xyz * BaseColorAndRoughness.xyz;
	Out.Roughness			= BaseColorAndRoughness.w;
	Out.Specular			= float(0xFF & In.Specular_LightChannels_Backlit) / 0xFF;
	Out.LightChannelMask	= (In.Specular_LightChannels_Backlit >>8) & 0x7;
	Out.Backlit				= float(0xFF & (In.Specular_LightChannels_Backlit>>16)) / 0xFF;
	Out.bScatterSceneLighting = (In.Specular_LightChannels_Backlit & (1<<12)) > 0;

	// Emissive is not packed/unpacked
	return Out;
}

uint GetInvalidTressFXPrimitiveId()
{
return 0xFFFFFFFF;
}

uint PackTressFXVisSample(uint PrimitiveId, uint MaterialId)
{
	return (PrimitiveId & 0x0FFFFFFF) | ((MaterialId & 0xF) << 28);
}

FTressFXVisSample UnpackTressFXVisSample(uint RawVis)
{
	FTressFXVisSample Out;
	Out.PrimitiveId = RawVis & 0x0FFFFFFF;
	Out.MaterialId = (RawVis >> 28) & 0xF;
	return Out;
}
 
// Pack depth & coverage within a uint32
uint PackTressFXVisSampleDepth(float InDepth, float InCoverage)
{
	//return asuint(Depth);
	return (uint(InDepth * 0x00FFFFFF) << 8) | uint(0xFF * saturate(InCoverage));
}

// Unpack depth & coverage from a uint32
float2 UnpackTressFXVisSampleDepth(uint InPacked)
{
	//return asfloat(InPacked);
	float OutDepth = float(InPacked >> 8) / float(0x00FFFFFF);
	float OutCoverage = float(InPacked & 0xFF) / float(0xFF);

	return float2(OutDepth, OutCoverage);
}

uint PackCoverageAndTressFXHairCount(float InCoverage)
{
	// Assume the storage is enough for not overflowing
	// Encode the strands_radius/pixel_radius ratio into 8bits, and this can accumulate up to 256 element with coverage of 1
	//return (InHairCount<<16) | uint(saturate(InCoverage) * 0xFF);
	return uint(saturate(InCoverage) * 1000.f);
}

float UnpackCoverageAndTressFXHairCount(uint InPacked)
{
	return float(InPacked) / 1000.f;
}

struct FNodeDescTFX
{
	uint Offset;
	uint Count;
};

uint EncodeNodeDescTFX(const FNodeDescTFX Desc)
{
	return (Desc.Offset & 0x03FFFFFF) | ((Desc.Count & 0x3F) << 26);
}

FNodeDescTFX DecodeNodeDescTFX(uint In)
{
	FNodeDescTFX Out;
	Out.Offset = In & 0x03FFFFFF;
	Out.Count  = (In >> 26) & 0x3F;
	return Out;
}


bool IsValidTressFXData(uint2 MRT0Data)
{
	const uint InvalidSample = GetInvalidTressFXPrimitiveId();// &0x0FFFFFFF; // PrimitiveId mask, see EncodeVisSample()
	return MRT0Data.x != InvalidSample;
}

void UnpackTressFXMRT0(uint2 In, inout uint PrimitiveId, inout uint MacroGroupId, inout uint Coverage8bit, inout float3 Tangent)
{
	PrimitiveId  =  In.x & 0x0FFFFFFF;
	MacroGroupId = (In.x >> 28) & 0xF;

	Tangent = DecodeTangentTFX(float3(
		float((In.y) & 0xFF) / 255.f,
		float((In.y >> 8) & 0xFF) / 255.f,
		float((In.y >> 16) & 0xFF) / 255.f));
	Coverage8bit = (In.y >> 24) & 0xFF;
}


bool NeedFastResolveTFX(float2 InEncodedVelocity, float InVelocityThreshold)
{
	const float2 Velocity = DecodeVelocityFromTexture(float4(InEncodedVelocity, 0.0, 0.0)).xy;
	const float VelocityMagnitude = sqrt(dot(Velocity, Velocity));
	return InEncodedVelocity.x > 0 && VelocityMagnitude > InVelocityThreshold;
}